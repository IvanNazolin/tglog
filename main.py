import sqlite3
import time
import json
import os
from CONFIG import bdPath, bdName, logFile, trafficFile, BOT_TOKEN, CHAT_ID
import requests

active_sessions = {}
last_totals = {}  # –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ —Ç—Ä–∞—Ñ–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –º–∏–Ω—É—Ç—ã


def send_session_end_message(name, start_time, end_time, duration, up_mb, down_mb):
    message = (
        f"üì° <b>–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>\n"
        f"üë§ –ö–ª–∏–µ–Ω—Ç: <b>{name}</b>\n"
        f"üïí –ü–µ—Ä–∏–æ–¥: {start_time} ‚Äì {end_time}\n"
        f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration}\n"
        f"üìä –¢—Ä–∞—Ñ–∏–∫: {format_traffic((up_mb + down_mb))}\n"
        f"‚¨ÜÔ∏è Upload: {format_traffic(up_mb)}\n"
        f"‚¨áÔ∏è Download: {format_traffic(down_mb)}"
    )
    send_telegram_message(message)


def send_telegram_message(message):
    for CHAT_Id in CHAT_ID:
        url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
        payload = {
            "chat_id": CHAT_Id,
            "text": message,
            "parse_mode": "HTML"
        }
        try:
            requests.post(url, data=payload)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")


def format_traffic(mb):
    return f"{mb:.2f} MB" if mb < 1024 else f"{mb/1024:.2f} GB"


def format_duration(seconds):
    mins, secs = divmod(seconds, 60)
    hours, mins = divmod(mins, 60)
    return f"{int(hours):02}:{int(mins):02}:{int(secs):02}"


def log_session(name, start_time, used_traffic, duration):
    timestamp = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(start_time))
    with open(logFile, "a", encoding="utf-8") as f:
        f.write(f"[{timestamp}] {name} | {format_traffic(used_traffic)} | –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration}\n")


def main():
    global active_sessions, last_totals
    connection = sqlite3.connect(f'{bdPath}/{bdName}')
    cursor = connection.cursor()
    cursor.execute("SELECT * FROM inbounds")
    rows = cursor.fetchall()
    connection.close()

    current_time = time.time()
    current_time_str = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(current_time))

    print("=" * 74)
    print(f"{'–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å':^74}")
    print(f"–í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {current_time_str}")
    print("-" * 74)

    updated_sessions = {}
    any_active = False
    telegram_message = ""

    # —Å—á–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç—Ä–∞—Ñ–∏–∫ –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ "–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –º–∏–Ω—É—Ç—ã"
    current_totals = {}
    for row in rows:
        name = row[5]
        up = float(row[2]) / 2**20
        down = float(row[3]) / 2**20
        total = up + down
        current_totals[name] = total

    # —Å—á–∏—Ç–∞–µ–º —Ä–∞–∑–Ω–∏—Ü—É —Å –ø—Ä–æ—à–ª—ã–º –∑–∞–º–µ—Ä–æ–º
    traffic_diff = {}
    total_diff = 0
    if last_totals:
        for name, total in current_totals.items():
            if name in last_totals:
                diff = total - last_totals[name]
                if diff > 0:
                    traffic_diff[name] = diff
                    total_diff += diff

    # –ª–æ–≥–∏–∫–∞ —Å–µ—Å—Å–∏–π
    for row in rows:
        name = row[5]
        up = float(row[2])
        down = float(row[3])

        if name in active_sessions:
            session = active_sessions[name]
            if up > session['last_up'] or down > session['last_down']:
                duration_secs = int(current_time - session['start_time'])
                duration = format_duration(duration_secs)
                used_traffic = ((up - session['start_up']) + (down - session['start_down'])) / 2**20

                # –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏—Ä–æ—Å—Ç –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –º–∏–Ω—É—Ç—ã
                extra = ""
                if name in traffic_diff:
                    extra = f" | ‚ûï {format_traffic(traffic_diff[name])}"

                telegram_message += f"üë§ <b>{name}</b>\n‚è±Ô∏è {duration} | üìä {format_traffic(used_traffic)}{extra}\n\n"
                any_active = True

                updated_sessions[name] = {
                    **session,
                    'last_up': up,
                    'last_down': down
                }
            else:
                # —Å–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞
                duration_secs = int(current_time - session['start_time'])
                duration = format_duration(duration_secs)
                up_mb = (session['last_up'] - session['start_up']) / 2**20
                down_mb = (session['last_down'] - session['start_down']) / 2**20
                total_mb = up_mb + down_mb

                if total_mb > 0:
                    log_session(name, session['start_time'], total_mb, duration)
                    start_fmt = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(session['start_time']))
                    end_fmt = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(current_time))
                    send_session_end_message(name, start_fmt, end_fmt, duration, up_mb, down_mb)
        else:
            updated_sessions[name] = {
                'start_time': current_time,
                'start_up': up,
                'start_down': down,
                'last_up': up,
                'last_down': down
            }

    active_sessions = updated_sessions

    # –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º
    if not any_active:
        send_telegram_message("<b>üîï –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç.</b>")
    else:
        msg = f"<b>üì° –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏:</b>\n\n{telegram_message.strip()}"
        if total_diff > 0:
            msg += f"\n\n<b>–í—Å–µ–≥–æ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –º–∏–Ω—É—Ç—ã:</b> {format_traffic(total_diff)}"
        send_telegram_message(msg)

    last_totals = current_totals  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    time.sleep(180)


if __name__ == "__main__":
    # –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    start_time = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime())
    send_telegram_message(f"ü§ñ <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Å—Å–∏–π –∑–∞–ø—É—â–µ–Ω!</b>\n"
                          f"üïí –í—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞: {start_time}\n"
                          f"‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: 3 –º–∏–Ω—É—Ç—ã\n"
                          f"üì° –ë—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –∏ —Ä–∞—Å—Ö–æ–¥ —Ç—Ä–∞—Ñ–∏–∫–∞.")

    # –∂–¥—ë–º —Ä–æ–≤–Ω–æ–≥–æ —á–∞—Å–∞
    while time.ctime().split()[3][-2:] != "00":
        pass

    while True:
        main()